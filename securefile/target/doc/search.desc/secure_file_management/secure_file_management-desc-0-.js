searchState.loadedDescShard("secure_file_management", 0, "Manages file locks in memory to prevent concurrent file …\nHandles the admin interface for file management …\nChecks if a file is locked in the database.\nDecrypts an encrypted file and returns the decrypted …\nEncrypts a file and saves the encrypted content to a new …\nEncrypts a file using the provided key and path, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLocks a file in the database by updating the <code>locked</code> status …\nCreates a new instance of <code>FileLockManager</code> with an empty …\nUnlocks a file in the database by updating the <code>locked</code> …\nDisplays the Admin menu and handles corresponding …\nDecrypts a file and simulates its download.\nHandles the menu for the Developer role, allowing them to …\nHandles the menu for the Director role, allowing them to …\nDisplays the Manager menu and provides file access based …\nRole with administrative privileges.\nRole for software developers.\nRole for directors with high-level access.\nRole for managers with specific access rights.\nRepresents the role of a user in the system.\nAdds a new user to the database.\nAuthenticates a user by verifying their email and password.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDisplays the user management menu, allowing administrators …")