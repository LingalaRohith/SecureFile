searchState.loadedDescShard("securefile", 0, "Displays the Admin menu and handles corresponding …\nChecks whether a user role has access to a file based on …\nDecrypts a file and simulates its download.\nHandles the menu for the Developer role, allowing them to …\nHandles the menu for the Director role, allowing them to …\nFetches the file ID for a given file name from the …\nRetrieves the file priority from the database.\nHelper function to get user input from the terminal.\nEntry point of the application. Manages user login and …\nDisplays the Manager menu and provides file access based …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nManages file locks in memory to prevent concurrent file …\nHandles the admin interface for file management …\nChecks if a file is locked in the database.\nDecrypts an encrypted file and returns the decrypted …\nEncrypts a file and saves the encrypted content to a new …\nEncrypts a file using the provided key and path, …\nReturns the argument unchanged.\nInserts file metadata into the database.\nCalls <code>U::from(self)</code>.\nLocks a file in memory.\nLocks a file in the database by updating the <code>locked</code> status …\nCreates a new instance of <code>FileLockManager</code> with an empty …\nUnlocks a file in the database by updating the <code>locked</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")