# # Step 1: Use an official Rust image as the base for building the app
# FROM rust:1.82 as builder

# # Step 2: Set the working directory inside the container
# WORKDIR /usr/src/app

# # Step 3: Install dependencies for OpenSSL 3.0, build tools, and CA certificates
# RUN apt-get update && apt-get install -y \
#     build-essential \
#     curl \
#     libssl-dev \
#     pkg-config \
#     ca-certificates \
#     && rm -rf /var/lib/apt/lists/*

# # Step 4: Install OpenSSL 3.0 from source
# RUN curl -fsSL https://www.openssl.org/source/openssl-3.0.7.tar.gz -o openssl-3.0.7.tar.gz \
#     && tar -xzf openssl-3.0.7.tar.gz \
#     && cd openssl-3.0.7 \
#     && ./config --prefix=/usr/local --openssldir=/usr/local/openssl \
#     && make -j$(nproc) \
#     && make install \
#     && cd .. \
#     && rm -rf openssl-3.0.7.tar.gz openssl-3.0.7

# # Step 5: Install sqlx-cli for database migrations
# RUN cargo install sqlx-cli

# # Step 6: Set a placeholder DATABASE_URL environment variable for sqlx preparation
# ENV DATABASE_URL=mysql://root:123@Rohith@localhost/Files

# # Step 7: Copy Cargo files to leverage Docker caching during dependency installation
# COPY Cargo.toml Cargo.lock ./

# # Step 8: Build dependencies only to cache them in a separate layer
# RUN cargo fetch

# # Step 9: Copy the source code into the container
# COPY src/ ./src/

# # Step 10: Copy the sqlx-data.json generated by `cargo sqlx prepare`
# COPY .sqlx/sqlx-data.json ./

# # Step 11: Build the project in release mode
# RUN cargo build --release

# # Step 12: Use a smaller base image for the final image to minimize size
# FROM debian:bullseye-slim

# # Step 13: Install CA certificates for runtime
# RUN apt-get update && apt-get install -y \
#     ca-certificates \
#     && rm -rf /var/lib/apt/lists/*

# # Step 14: Ensure OpenSSL libraries are available at runtime
# ENV LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:/usr/local/openssl/lib

# # Step 15: Set the working directory inside the container
# WORKDIR /usr/src/app

# # Step 16: Copy the compiled binary from the builder image
# COPY --from=builder /usr/src/app/target/release/securefile /usr/local/bin/securefile

# # Step 17: Set the entrypoint for the container
# ENTRYPOINT ["/usr/local/bin/securefile"]


# Step 1: Use an official Rust image as the base for building the app
FROM rust:1.82 AS builder

# Step 2: Set the working directory inside the container
WORKDIR /usr/src/app

# Step 3: Install dependencies for OpenSSL 3.0, build tools, and CA certificates
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    libssl-dev \
    pkg-config \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Step 4: Install OpenSSL 3.0 from source
RUN curl -fsSL https://www.openssl.org/source/openssl-3.0.7.tar.gz -o openssl-3.0.7.tar.gz \
    && tar -xzf openssl-3.0.7.tar.gz \
    && cd openssl-3.0.7 \
    && ./config --prefix=/usr/local --openssldir=/usr/local/openssl \
    && make -j$(nproc) \
    && make install \
    && cd .. \
    && rm -rf openssl-3.0.7.tar.gz openssl-3.0.7

# Step 5: Install sqlx-cli for database migrations
RUN cargo install sqlx-cli

# Step 6: Set a placeholder DATABASE_URL environment variable for sqlx preparation
ENV DATABASE_URL=mysql://root:123%40Rohith@db:3306/Files  
# mysql://root:123@Rohith@localhost/Files

# Step 7: Copy Cargo files to leverage Docker caching during dependency installation
COPY Cargo.toml Cargo.lock ./

# Step 8: Fetch dependencies to leverage caching
RUN cargo fetch

# Step 9: Copy the source code into the container
COPY src/ ./src/

# Step 10: Copy the sqlx-data.json generated by `cargo sqlx prepare`
COPY .sqlx/sqlx-data.json ./

# Step 11: Build the project in release mode
RUN cargo build --release

# Step 12: Use a newer base image for the final runtime image
FROM debian:bookworm-slim AS runtime

# Step 13: Install CA certificates
RUN apt-get update && apt-get install -y \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Step 14: Copy OpenSSL libraries from the builder
COPY --from=builder /usr/local/lib /usr/local/lib
COPY --from=builder /usr/local/openssl /usr/local/openssl

# Step 15: Set the library path for OpenSSL
ENV LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:/usr/local/openssl/lib

# Step 16: Set the working directory inside the container
WORKDIR /usr/src/app

# Step 17: Copy the compiled binary from the builder image
COPY --from=builder /usr/src/app/target/release/securefile /usr/local/bin/securefile

# Step 18: Expose the application port (optional, adjust as needed)
EXPOSE 8080

# Step 19: Set the entrypoint for the container
ENTRYPOINT ["/usr/local/bin/securefile"]

